--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=4 LPM_WIDTHB=21 LPM_WIDTHP=25 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:04:25:18:06:29:SJ cbx_lpm_add_sub 2017:04:25:18:06:29:SJ cbx_lpm_mult 2017:04:25:18:06:29:SJ cbx_mgl 2017:04:25:18:09:28:SJ cbx_nadder 2017:04:25:18:06:30:SJ cbx_padd 2017:04:25:18:06:30:SJ cbx_stratix 2017:04:25:18:06:30:SJ cbx_stratixii 2017:04:25:18:06:30:SJ cbx_util_mgl 2017:04:25:18:06:30:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 130 
SUBDESIGN mult_7ms
( 
	dataa[3..0]	:	input;
	datab[20..0]	:	input;
	result[24..0]	:	output;
) 
VARIABLE
	add10_result[24..0]	:	WIRE;
	add14_result[2..0]	:	WIRE;
	add6_result[27..0]	:	WIRE;
	cs1a[2..0] : carry_sum;
	cs2a[2..0] : carry_sum;
	le3a[22..0] : lcell;
	le4a[22..0] : lcell;
	le5a[21..0] : lcell;
	sft11a[24..0] : soft;
	sft12a[24..0] : soft;
	sft13a[24..0] : soft;
	sft15a[2..0] : soft;
	sft16a[2..0] : soft;
	sft17a[2..0] : soft;
	sft7a[27..0] : soft;
	sft8a[27..0] : soft;
	sft9a[27..0] : soft;
	dataa_node[20..0]	: WIRE;
	datab_node[3..0]	: WIRE;
	final_result_node[24..0]	: WIRE;
	w151w[22..0]	: WIRE;
	w268w	: WIRE;
	w281w	: WIRE;
	w444w[27..0]	: WIRE;
	w70w[22..0]	: WIRE;
	w7w[5..0]	: WIRE;

BEGIN 
	add10_result[] = sft11a[].out + sft12a[].out;
	add14_result[] = sft15a[].out + sft16a[].out;
	add6_result[] = sft7a[].out + sft8a[].out;
	cs1a[].cin = ( ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs2a[].cin = ( ((w7w[4..4] & cs2a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs2a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs2a[].sin = ( ((((((! w7w[5..5]) & (! w7w[4..4])) & cs2a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs2a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs2a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs2a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs2a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs2a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs2a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs2a[0].cout)), w7w[0..0]);
	le3a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[0].sout) & (! cs2a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[0].sout) & cs2a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[0].sout)) & cs2a[0].sout)))));
	le4a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[1].sout) & (! cs2a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[1].sout) & cs2a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[1].sout)) & cs2a[1].sout)))));
	le5a[].in = ((cs1a[2].sout & ( dataa_node[], B"0")) # (cs2a[2].sout & ( B"0", dataa_node[])));
	sft11a[].in = ( w281w, ( w268w, ( le5a[20..20].out, ( le5a[19..19].out, ( le5a[18..18].out, ( le4a[19..19].out, ( le4a[18..18].out, ( le4a[17..17].out, ( le4a[16..16].out, ( le4a[15..15].out, ( le4a[14..14].out, ( le4a[13..13].out, ( le4a[12..12].out, ( le4a[11..11].out, ( le4a[10..10].out, ( le4a[9..9].out, ( le4a[8..8].out, ( le4a[7..7].out, ( le4a[6..6].out, ( le4a[5..5].out, ( le4a[4..4].out, ( le4a[3..3].out, ( le4a[2..2].out, ( le3a[3..2].out))))))))))))))))))))))));
	sft12a[].in = ( w281w, ( w281w, ( (! w151w[22..22]), ( le4a[21..21].out, ( le4a[20..20].out, ( le3a[21..21].out, ( le3a[20..20].out, ( le3a[19..19].out, ( le3a[18..18].out, ( le3a[17..17].out, ( le3a[16..16].out, ( le3a[15..15].out, ( le3a[14..14].out, ( le3a[13..13].out, ( le3a[12..12].out, ( le3a[11..11].out, ( le3a[10..10].out, ( le3a[9..9].out, ( le3a[8..8].out, ( le3a[7..7].out, ( le3a[6..6].out, ( le3a[5..5].out, ( le3a[4..4].out, ( w281w, cs1a[1].sout))))))))))))))))))))))));
	sft13a[].in = add10_result[];
	sft15a[].in = ( w281w, ( w268w, w268w));
	sft16a[].in = ( w281w, ( w281w, (! w70w[22..22])));
	sft17a[].in = add14_result[];
	sft7a[].in = ( w268w, ( w268w, ( le5a[21..21].out, ( sft13a[22..22].out, ( sft13a[21..21].out, ( sft13a[20..20].out, ( le5a[17..17].out, ( le5a[16..16].out, ( le5a[15..15].out, ( le5a[14..14].out, ( le5a[13..13].out, ( le5a[12..12].out, ( le5a[11..11].out, ( le5a[10..10].out, ( le5a[9..9].out, ( le5a[8..8].out, ( le5a[7..7].out, ( le5a[6..6].out, ( le5a[5..5].out, ( le5a[4..4].out, ( le5a[3..3].out, ( le5a[2..2].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le4a[1..1].out, ( le4a[0..0].out, ( le3a[1..0].out)))))))))))))))))))))))))));
	sft8a[].in = ( w281w, ( sft13a[24..24].out, ( sft13a[23..23].out, ( sft17a[2..2].out, ( sft17a[1..1].out, ( sft17a[0..0].out, ( sft13a[19..19].out, ( sft13a[18..18].out, ( sft13a[17..17].out, ( sft13a[16..16].out, ( sft13a[15..15].out, ( sft13a[14..14].out, ( sft13a[13..13].out, ( sft13a[12..12].out, ( sft13a[11..11].out, ( sft13a[10..10].out, ( sft13a[9..9].out, ( sft13a[8..8].out, ( sft13a[7..7].out, ( sft13a[6..6].out, ( sft13a[5..5].out, ( sft13a[4..4].out, ( sft13a[3..3].out, ( sft13a[2..2].out, ( sft13a[1..1].out, ( sft13a[0..0].out, ( w281w, cs1a[0].sout)))))))))))))))))))))))))));
	sft9a[].in = add6_result[];
	dataa_node[] = ( datab[20..0]);
	datab_node[] = ( dataa[3..0]);
	final_result_node[] = ( w444w[24..0]);
	result[] = ( final_result_node[24..0]);
	w151w[] = le4a[].out;
	w268w = B"1";
	w281w = B"0";
	w444w[] = ( sft9a[27..27].out, sft9a[26..26].out, sft9a[25..25].out, sft9a[24..24].out, sft9a[23..23].out, sft9a[22..22].out, sft9a[21..21].out, sft9a[20..20].out, sft9a[19..19].out, sft9a[18..18].out, sft9a[17..17].out, sft9a[16..16].out, sft9a[15..15].out, sft9a[14..14].out, sft9a[13..13].out, sft9a[12..12].out, sft9a[11..11].out, sft9a[10..10].out, sft9a[9..9].out, sft9a[8..8].out, sft9a[7..7].out, sft9a[6..6].out, sft9a[5..5].out, sft9a[4..4].out, sft9a[3..3].out, sft9a[2..2].out, sft9a[1..1].out, sft9a[0..0].out);
	w70w[] = le3a[].out;
	w7w[] = ( B"00", datab_node[]);
END;
--VALID FILE
